package Administrador;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Luis DC
 */
public class panelserviciosadmin extends javax.swing.JPanel {
    private int idServicioSeleccionado = -1;
    /**
     * Creates new form panelserviciosadmin
     */
    public panelserviciosadmin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        BarraDeBusqueda = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtblServicios = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        TxtDesc = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        TxtCost = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(181, 218, 240));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Servicio");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 80, 30));

        BarraDeBusqueda.setBackground(new java.awt.Color(181, 218, 240));
        BarraDeBusqueda.setBorder(null);
        jPanel1.add(BarraDeBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 270, 30));

        jtblServicios.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jtblServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Servicios", "Costo por kg", "Descripcion "
            }
        ));
        jtblServicios.setToolTipText("");
        jScrollPane5.setViewportView(jtblServicios);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 330, 380));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("_______________________________________");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        jButton6.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar (1).png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.setContentAreaFilled(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton6.setVerifyInputWhenFocusTarget(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, -1, -1));

        btnGuardar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(0, 0, 0));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-agregar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(null);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnGuardar.setVerifyInputWhenFocusTarget(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 110, 40));

        jButton5.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar (2).png"))); // NOI18N
        jButton5.setText("Eliminar");
        jButton5.setBorder(null);
        jButton5.setContentAreaFilled(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton5.setVerifyInputWhenFocusTarget(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 110, 60));

        jButton7.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar (1).png"))); // NOI18N
        jButton7.setText("Editar");
        jButton7.setBorder(null);
        jButton7.setContentAreaFilled(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton7.setVerifyInputWhenFocusTarget(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, 110, 40));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Servicio");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 79, 41));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Costo por kg");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 80, 41));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Descripcion");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 101, 41));

        jLabel11.setBackground(new java.awt.Color(118, 120, 237));
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("________________________");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 190, -1));

        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("_________________________");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, 180, -1));

        txtNombre.setBackground(new java.awt.Color(181, 218, 240));
        txtNombre.setBorder(null);
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 180, 39));

        TxtDesc.setBackground(new java.awt.Color(181, 218, 240));
        TxtDesc.setBorder(null);
        TxtDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtDescActionPerformed(evt);
            }
        });
        jPanel1.add(TxtDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 180, 39));

        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("_________________________");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 180, -1));

        TxtCost.setBackground(new java.awt.Color(181, 218, 240));
        TxtCost.setBorder(null);
        TxtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCostActionPerformed(evt);
            }
        });
        jPanel1.add(TxtCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, 180, 39));

        btnAgregar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(0, 0, 0));
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-agregar.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.setBorder(null);
        btnAgregar.setContentAreaFilled(false);
        btnAgregar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAgregar.setVerifyInputWhenFocusTarget(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 110, 40));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 470));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {
        int ipNumber = Integer.parseInt(BarraDeBusqueda.getText().trim());
        
        DefaultTableModel model = (DefaultTableModel) jtblServicios.getModel();
        model.setRowCount(0);
        
        // Versión con corchetes (recomendada para SQL Server)
        String sql = "SELECT [IdServicio], [TipoServicio], [Descripcion], [PrecioUnitario] " +
                     "FROM [Servicio] " +
                     "WHERE [IdServicio] = ?";
        
        try (Connection conn = Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, ipNumber);
            
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("IdServicio"),
                        rs.getString("TipoServicio"),
                        rs.getString("Descripcion"),
                        rs.getFloat("PrecioUnitario")
                    });
                }
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Ingrese un número válido", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error SQL: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void TxtDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtDescActionPerformed

    private void TxtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCostActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
         String nombre = txtNombre.getText().trim();
    String descripcion = TxtDesc.getText().trim();
    
    try {
        float costo = Float.parseFloat(TxtCost.getText().trim());
        
        // 2. Validación básica
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre del servicio es obligatorio", 
                                       "Error", JOptionPane.ERROR_MESSAGE);
            txtNombre.requestFocus();
            return;
        }
        
        // 3. Determinar si es INSERT o UPDATE
        try (Connection conn = Conexion.getConnection()) {
            String sql;
            boolean esActualizacion = (idServicioSeleccionado > 0);
            
            if (esActualizacion) {
                sql = "UPDATE dbo.Servicio SET TipoServicio=?, Descripcion=?, PrecioUnitario=? WHERE IdServicio=?";
            } else {
                sql = "INSERT INTO dbo.Servicio (TipoServicio, Descripcion, PrecioUnitario) VALUES (?, ?, ?)";
            }
            
            // 4. Ejecutar operación
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, nombre);
                pstmt.setString(2, descripcion);
                pstmt.setFloat(3, costo);
                
                if (esActualizacion) {
                    pstmt.setInt(4, idServicioSeleccionado);
                }
                
                int filasAfectadas = pstmt.executeUpdate();
                
                // 5. Manejar resultados
                if (filasAfectadas > 0) {
                    String mensaje = esActualizacion ? "Servicio actualizado" : "Servicio registrado";
                    JOptionPane.showMessageDialog(this, mensaje);
                    
                    // 6. Resetear interfaz EXACTAMENTE como lo pides
                    limpiarCampos();
                    btnGuardar.setText("Guardar"); // Equivalente a tu "Añadir"
                    idServicioSeleccionado = -1;    // Equivalente a tu clienteSeleccionadoId = -1
                    
                    // 7. Actualizar tabla
                    actualizarTablaServicios();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error en base de datos: " + ex.getMessage(), 
                                       "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "El costo debe ser un número válido", 
                                    "Error", JOptionPane.ERROR_MESSAGE);
        TxtCost.requestFocus();
    }
        
    
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        String nombre = txtNombre.getText().trim();       // Corresponde a TipoServicio
    String descripcion = TxtDesc.getText().trim();    // Corresponde a Descripcion
    
    try {
        float costo = Float.parseFloat(TxtCost.getText().trim());  // Corresponde a PrecioUnitario
        
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El tipo de servicio es obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                 "INSERT INTO dbo.Servicio (TipoServicio, Descripcion, PrecioUnitario) VALUES (?, ?, ?)")) {
            
            pstmt.setString(1, nombre);
            pstmt.setString(2, descripcion);
            pstmt.setFloat(3, costo);
            
            if (pstmt.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Servicio registrado en dbo.Servicio");
                limpiarCampos();
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Precio debe ser numérico", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error en BD: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    limpiarCampos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if (idServicioSeleccionado <= 0) {
        JOptionPane.showMessageDialog(this, "Seleccione un servicio de la tabla primero", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String nombre = txtNombre.getText().trim();
    String descripcion = TxtDesc.getText().trim();
    
    try {
        float costo = Float.parseFloat(TxtCost.getText().trim());

        try (Connection conn = Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                 "UPDATE dbo.Servicio SET TipoServicio=?, Descripcion=?, PrecioUnitario=? WHERE IdServicio=?")) {
            
            pstmt.setString(1, nombre);
            pstmt.setString(2, descripcion);
            pstmt.setFloat(3, costo);
            pstmt.setInt(4, idServicioSeleccionado);
            
            if (pstmt.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Servicio actualizado correctamente");
                actualizarTablaServicios(); // Actualizar la tabla
                limpiarCampos();
                idServicioSeleccionado = -1; // Resetear selección
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Formato de precio inválido", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al actualizar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    limpiarCampos();
    actualizarTablaServicios();
    
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (idServicioSeleccionado <= 0) {
        JOptionPane.showMessageDialog(this, "Seleccione un servicio de la tabla primero", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirmacion = JOptionPane.showConfirmDialog(this, 
        "¿Está seguro de eliminar este servicio permanentemente?", 
        "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
    
    if (confirmacion == JOptionPane.YES_OPTION) {
        try (Connection conn = Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                 "DELETE FROM dbo.Servicio WHERE IdServicio=?")) {
            
            pstmt.setInt(1, idServicioSeleccionado);
            
            if (pstmt.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Servicio eliminado exitosamente");
                actualizarTablaServicios(); // Actualizar la tabla
                limpiarCampos();
                idServicioSeleccionado = -1;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al eliminar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } 
    
    limpiarCampos();
    actualizarTablaServicios();
    }//GEN-LAST:event_jButton5ActionPerformed
    
     private void actualizarTablaServicios() {
    DefaultTableModel model = (DefaultTableModel) jtblServicios.getModel();
    model.setRowCount(0); // Limpiar tabla
    
    String sql = "SELECT IdServicio, TipoServicio, Descripcion, PrecioUnitario FROM dbo.Servicio";
    
    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {
        
        // Llenar tabla
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("IdServicio"),
                rs.getString("TipoServicio"),
                rs.getString("Descripcion"),
                String.format("$%.2f", rs.getFloat("PrecioUnitario")) // Formato monetario
            });
        }
        
        // Configurar listener para selección
        jtblServicios.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int fila = jtblServicios.getSelectedRow();
                if (fila >= 0) {
                    idServicioSeleccionado = (int) jtblServicios.getValueAt(fila, 0);
                    cargarServicioParaEdicion(idServicioSeleccionado);
                }
            }
        });
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al actualizar tabla:\n" + ex.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void cargarServicioParaEdicion(int idServicio) {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(
             "SELECT TipoServicio, Descripcion, PrecioUnitario FROM dbo.Servicio WHERE IdServicio=?")) {
        
        pstmt.setInt(1, idServicio);
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
            txtNombre.setText(rs.getString("TipoServicio"));
            TxtDesc.setText(rs.getString("Descripcion"));
            TxtCost.setText(String.valueOf(rs.getFloat("PrecioUnitario")));
            btnGuardar.setText("Actualizar");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al cargar servicio: " + ex.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void cargarServicio(int idServicio) {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(
             "SELECT TipoServicio, Descripcion, PrecioUnitario FROM dbo.Servicio WHERE IdServicio=?")) {
        
        pstmt.setInt(1, idServicio);
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
            txtNombre.setText(rs.getString("TipoServicio"));
            TxtDesc.setText(rs.getString("Descripcion"));
            TxtCost.setText(String.valueOf(rs.getFloat("PrecioUnitario")));
            idServicioSeleccionado = idServicio;
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar servicio", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    // Limpiar formulario
private void limpiarCampos() {
    txtNombre.setText("");
    TxtDesc.setText("");
    TxtCost.setText("");
    txtNombre.requestFocus();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BarraDeBusqueda;
    private javax.swing.JTextField TxtCost;
    private javax.swing.JTextField TxtDesc;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jtblServicios;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
