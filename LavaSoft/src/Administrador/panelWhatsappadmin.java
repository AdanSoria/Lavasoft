/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Administrador;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.net.URI;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author soria
 */
public class panelWhatsappadmin extends javax.swing.JPanel {

    /**
     * Creates new form panelWhatsappadmin
     */
    public panelWhatsappadmin() {
        try (Connection conn = Conexion.getConnection()) {
            System.out.println("Conexión exitosa:D.");
            
        } catch (SQLException e) {
            System.out.println("Error de conexión");
            e.printStackTrace();
            
        }
        
        initComponents();
        actualizarTablaClientes(); // Llama a la función para cargar la tabla
        cargarServicios();
        configurarRenderizadores();
         
       /* Component[] componentes = this.getContentPane().getComponents();

for (Component comp : componentes) {
    comp.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusGained(java.awt.event.FocusEvent evt) {
            limpiarMensaje(lblMensaje);
        }
    });
}
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneli = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMensaje = new javax.swing.JTextArea();
        jcbServicios = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblClientes = new javax.swing.JTable();
        jcbFechaI = new com.toedter.calendar.JDateChooser();
        lblCliente = new javax.swing.JLabel();
        jcbFechaF = new com.toedter.calendar.JDateChooser();
        lblFechaF = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblCliente1 = new javax.swing.JLabel();
        jcbEstados = new javax.swing.JComboBox<>();
        lblMensaje = new javax.swing.JLabel();
        JMasivo = new javax.swing.JRadioButton();
        jButton7 = new javax.swing.JButton();
        lblFechaI = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 490));

        paneli.setPreferredSize(new java.awt.Dimension(900, 490));

        jTextAreaMensaje.setColumns(20);
        jTextAreaMensaje.setRows(5);
        jTextAreaMensaje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaMensajeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaMensaje);

        jcbServicios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Servicio" }));
        jcbServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbServiciosActionPerformed(evt);
            }
        });

        jtblClientes.setBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.setForeground(new java.awt.Color(255, 255, 255));
        jtblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seleccionar", "IdCliente", "Nombre", "Direccion", "Telefono", "Correo", "FechaRegistro", "Whatsapp"
            }
        ));
        jtblClientes.setGridColor(new java.awt.Color(51, 51, 51));
        jtblClientes.setSelectionBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblClientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblClientes);

        jcbFechaI.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcbFechaIPropertyChange(evt);
            }
        });

        lblCliente.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblCliente.setForeground(new java.awt.Color(0, 0, 0));
        lblCliente.setText("Servicio:");

        jcbFechaF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcbFechaFPropertyChange(evt);
            }
        });

        lblFechaF.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblFechaF.setForeground(new java.awt.Color(0, 0, 0));
        lblFechaF.setText("Fecha Fin:");

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Envio de Mensajes/Correos Masivos");

        lblCliente1.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblCliente1.setForeground(new java.awt.Color(0, 0, 0));
        lblCliente1.setText("Estado:");

        jcbEstados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Estado", "Pendiente", "Proceso", "Listo", "Entregado" }));
        jcbEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEstadosActionPerformed(evt);
            }
        });

        lblMensaje.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblMensaje.setForeground(new java.awt.Color(0, 0, 0));
        lblMensaje.setText("Mensaje:");

        JMasivo.setText("Todos");
        JMasivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMasivoActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-agregar (1).png"))); // NOI18N
        jButton7.setText("Enviar");
        jButton7.setBorder(null);
        jButton7.setContentAreaFilled(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton7.setVerifyInputWhenFocusTarget(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        lblFechaI.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblFechaI.setForeground(new java.awt.Color(0, 0, 0));
        lblFechaI.setText("Fecha Inicio:");

        javax.swing.GroupLayout paneliLayout = new javax.swing.GroupLayout(paneli);
        paneli.setLayout(paneliLayout);
        paneliLayout.setHorizontalGroup(
            paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneliLayout.createSequentialGroup()
                .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneliLayout.createSequentialGroup()
                        .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneliLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addGap(137, 137, 137)
                                        .addComponent(lblFechaI, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jcbFechaI, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addGap(138, 138, 138)
                                        .addComponent(lblFechaF, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jcbFechaF, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(jcbServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jcbEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addGap(160, 160, 160)
                                        .addComponent(JMasivo))
                                    .addGroup(paneliLayout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(jLabel7))))
                            .addComponent(lblMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(paneliLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneliLayout.createSequentialGroup()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );
        paneliLayout.setVerticalGroup(
            paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneliLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addGroup(paneliLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFechaI, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbFechaI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFechaF, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbFechaF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(paneliLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jcbServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(paneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(paneliLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jcbEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addComponent(JMasivo)
                        .addGap(4, 4, 4)
                        .addComponent(lblMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paneli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEstadosActionPerformed
        ParametrosConsulta();
    }//GEN-LAST:event_jcbEstadosActionPerformed

    private void JMasivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMasivoActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();

        // Si el RadioButton está seleccionado
        boolean selectAll = JMasivo.isSelected();

        if (selectAll) {
            jcbEstados.setSelectedIndex(0);
            jcbServicios.setSelectedIndex(0);
            jcbFechaI.setDate(null);
            jcbFechaF.setDate(null);
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(selectAll, i, 0);  // Actualiza el valor de la casilla de la primera columna
        }
    }//GEN-LAST:event_JMasivoActionPerformed

    private void jcbFechaIPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcbFechaIPropertyChange
        limpiarMensaje(lblFechaI);
        ParametrosConsulta();
    }//GEN-LAST:event_jcbFechaIPropertyChange

    private void jcbFechaFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcbFechaFPropertyChange
        limpiarMensaje(lblFechaF) ;
        ParametrosConsulta();
    }//GEN-LAST:event_jcbFechaFPropertyChange

    private void jcbServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbServiciosActionPerformed
        ParametrosConsulta();
    }//GEN-LAST:event_jcbServiciosActionPerformed

    private void jtblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblClientesMouseClicked
        limpiarMensaje(lblMensaje);
    }//GEN-LAST:event_jtblClientesMouseClicked

    private void jTextAreaMensajeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMensajeMouseClicked
        limpiarMensaje(lblMensaje);
    }//GEN-LAST:event_jTextAreaMensajeMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        enviarMensajesMasivo();
    }//GEN-LAST:event_jButton7ActionPerformed
     private void ParametrosConsulta(){
     String itemSeleccionado = (String) jcbServicios.getSelectedItem();
String estadoSeleccionado = (String) jcbEstados.getSelectedItem();

Date fechaInicio = jcbFechaI.getDate();
Date fechaFin = jcbFechaF.getDate();

LocalDate fechaI = null;
LocalDate fechaF = null;

if (fechaInicio != null && fechaFin != null) {
    fechaI = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    fechaF = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    if (fechaInicio.after(fechaFin)) {
        lblFechaI.setForeground(Color.RED);  // Cambia el color del JLabel a rojo
       lblFechaI.setToolTipText("La Fecha de INICIO no puede ser POSTERIOR a la Fecha FINAL."); 
        jcbFechaI.requestFocus();
    }
}

// Si servicio y estado están en "Selecciona" y las fechas son nulas, limpiar los checks
    if ((itemSeleccionado == null || itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) &&
        (estadoSeleccionado == null || estadoSeleccionado.equalsIgnoreCase("Seleccione Estado")) &&
        (fechaI == null || fechaF == null)) {

        limpiarChecks();  // Limpiar los checks si no hay ningún filtro activo
    } else {
        try {
            Integer idServicio = null;

            if (itemSeleccionado != null && !itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) {
            idServicio = Integer.valueOf(itemSeleccionado.split("-")[0].trim());
            }

            // Llamada con todos los filtros posibles
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(idServicio, 
                                                                               estadoSeleccionado.equalsIgnoreCase("Seleccione Estado") ? null : estadoSeleccionado, 
                                                                               fechaI, 
                                                                               fechaF);
            seleccionarClientesEnTabla(clientesSeleccionados);

        } catch (NumberFormatException e) {
            System.out.println("Error al convertir ID de servicio: " + itemSeleccionado);
            limpiarChecks(); // Limpiar los checks si hay un error
        }
    }
    }                                

    
    private void limpiarChecks() {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(false, i, 0);  // Pone todos los checks de la primera columna en false
    }
}
     private void cargarServicios() {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement("SELECT IdServicio, TipoServicio, PrecioUnitario FROM Servicio");
         ResultSet res = stmt.executeQuery()) {
        
        jcbServicios.removeAllItems();
        jcbServicios.addItem("Selecciona Servicio");

        while (res.next()) {
            jcbServicios.addItem(res.getInt("IdServicio") + " - " +
                                 res.getString("TipoServicio") +
                                 " - $" + res.getDouble("PrecioUnitario"));
        }
    } catch (SQLException ex) {
        System.out.println("Error al cargar servicios: " + ex.getMessage());
    }
}
     
    private void limpiarMensaje(JLabel label) {
    label.setForeground(Color.BLACK);
    label.setToolTipText(null);
}

    private void actualizarTablaClientes() {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de llenarla

    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement("SELECT * FROM dbo.Cliente");
         ResultSet rs = stmt.executeQuery()) {

        while (rs.next()) {
            model.addRow(new Object[]{
                false,  // Checkbox (Boolean)
                rs.getInt("IdCliente"),  // Integer
                rs.getString("Nombre"),   // String
                rs.getString("Direccion"), // String
                rs.getString("Telefono"),  // String
                rs.getString("CorreoElectronico"), // String
                new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate("FechaRegistro")), // String
                rs.getInt("Whatsapp")  // Integer (no Boolean)
            });
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar clientes: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void configurarRenderizadores() {
    // Renderizador para checkboxes (columna 0)
    jtblClientes.getColumnModel().getColumn(0).setCellRenderer(new panelWhatsappadmin.CheckBoxRenderer());
    jtblClientes.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    
    // Renderizador para la columna Whatsapp (columna 7)
    jtblClientes.getColumnModel().getColumn(7).setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            
            Component c = super.getTableCellRendererComponent(table, value, 
                isSelected, hasFocus, row, column);
            
            // Mostrar "Sí" o "No" en lugar de 1/0
            if (value instanceof Integer) {
                int whatsappValue = (Integer) value;
                setText(whatsappValue == 1 ? "Sí" : "No");
            }
            
            return c;
        }
    });
}
        
    // Función para generar el mensaje personalizado con los datos del cliente
public String generarMensaje(Cliente cliente, String mensajeTemplate) {
    String mensaje = mensajeTemplate;

    // Reemplazar los placeholders en el mensaje con los datos del cliente
    if (mensaje.contains("@Nombre")) {
        mensaje = mensaje.replace("@Nombre", cliente.getNombre());
    }
    if (mensaje.contains("@Direccion")) {
        mensaje = mensaje.replace("@Direccion", cliente.getDireccion()); // Corregido: debe ser @domicilio
    }
    if (mensaje.contains("@Telefono")) {
        mensaje = mensaje.replace("@Telefono", cliente.getTelefono());
    }
    if (mensaje.contains("@CorreoElectronico")) {
        mensaje = mensaje.replace("@CorreoElectronico", cliente.getCorreo());
    }
    if (mensaje.contains("@FechaRegistro")) {
        mensaje = mensaje.replace("@FechaRegistro", cliente.getFechaRegistro());
    }
    if (mensaje.contains("@IdCliente")) {
        mensaje = mensaje.replace("@IdCliente", String.valueOf(cliente.getIdCliente()));
    }
    if (mensaje.contains("@Whatsapp")) {
        mensaje = mensaje.replace("@Whatsapp", String.valueOf(cliente.getWhatsapp()));
    }

    return mensaje;
}

// Función para generar el mensaje personalizado con los datos del cliente
private void enviarMensajesMasivo() {
    // Obtener los clientes seleccionados
    
    List<Cliente> clientes = obtenerClientesSeleccionados();
    String mensajeTemplate = jTextAreaMensaje.getText();// Este método obtiene los clientes de la tabla
    
    if ((clientes == null || clientes.isEmpty()) && mensajeTemplate.isEmpty()) {
        lblMensaje.setForeground(Color.RED);  // Restaura el color original del JLabel
        lblMensaje.setToolTipText( " El MENSAJE no puede estar VACIO Y NO hay CLIENTES seleccionados.");
        return; // o puedes hacer cualquier otra acción para detener el proceso
    }if (mensajeTemplate.isEmpty()) {
       lblMensaje.setForeground(Color.RED);  // Restaura el color original del JLabel
        lblMensaje.setToolTipText("El MENSAJE no puede estar VACIO"); 
        return;
    } else if (clientes == null || clientes.isEmpty()) {
    lblMensaje.setForeground(Color.RED);  // Restaura el color original del JLabel
    lblMensaje.setToolTipText("No hay CLIENTES seleccionados. NO se puede enviar el MENSAJE.");
    return; // o puedes hacer cualquier otra acción para detener el proceso
    } 

    // Iterar sobre los clientes seleccionados
   for (Cliente cliente : clientes) {
        String mensajePersonalizado = generarMensaje(cliente, mensajeTemplate);

        if (cliente.getWhatsapp() == 1) {
            enviarPorWhatsApp(cliente.getTelefono(), mensajePersonalizado);
        } else {
           // ENVIAR POR CORREO
        }

        try {
            Thread.sleep(500); // espera entre envíos
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

private void enviarPorWhatsApp(String telefono, String mensaje) {
    try {
        String url = "https://api.whatsapp.com/send?phone=52" + telefono +
                     "&text=" + URLEncoder.encode(mensaje, "UTF-8");
        Desktop.getDesktop().browse(new URI(url));
    } catch (Exception e) {
        e.printStackTrace();
    }
}




    class CheckBoxRenderer extends JCheckBox implements TableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setSelected(value != null && (Boolean) value);  // Define si la casilla está seleccionada
            return this;
        }
    }
    
private Set<Integer> obtenerClientesSeleccionados(Integer idServicio, String estadoPedido, LocalDate fechaInicio, LocalDate fechaFin) {
    Set<Integer> clientesSeleccionados = new HashSet<>();

    String sql = "SELECT c.IdCliente " +
                 "FROM Pedido p " +
                 "INNER JOIN Cliente c ON c.IdCliente = p.IdCliente " +
                 "INNER JOIN Servicio s ON s.IdServicio = p.IdServicio " +
                 "WHERE 1=1";

    if (idServicio != null) {
        sql += " AND p.IdServicio = ?";
    }

    if (estadoPedido != null && !estadoPedido.isEmpty()) {
        sql += " AND p.EstadoPedido = ?";
    }

    if (fechaInicio != null && fechaFin != null) {
        sql += " AND p.FechaCreacion BETWEEN ? AND ?";
    }

    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        int paramIndex = 1;

        if (idServicio != null) {
            stmt.setInt(paramIndex++, idServicio);
        }

        if (estadoPedido != null && !estadoPedido.isEmpty()) {
            stmt.setString(paramIndex++, estadoPedido);
        }

        if (fechaInicio != null && fechaFin != null) {
             stmt.setDate(paramIndex++, java.sql.Date.valueOf(fechaInicio));
            stmt.setDate(paramIndex++, java.sql.Date.valueOf(fechaFin));
        }


        System.out.println("Consulta SQL ejecutada: " + sql);
        System.out.println("Parámetros -> Servicio: " + idServicio + " | Estado: " + estadoPedido + 
                           " | FechaInicio: " + fechaInicio + " | FechaFin: " + fechaFin);

        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            clientesSeleccionados.add(rs.getInt("IdCliente"));
            System.out.println("Cliente seleccionado: " + rs.getInt("IdCliente"));
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return clientesSeleccionados;
}


    private void seleccionarClientesEnTabla(Set<Integer> clientesSeleccionados) {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    
 for (int i = 0; i < jtblClientes.getRowCount(); i++) {
        int clienteId = (int) jtblClientes.getValueAt(i, 1);  
        boolean marcado = clientesSeleccionados.contains(clienteId);
        jtblClientes.setValueAt(marcado, i, 0);  
    }
}

    private List<Cliente> obtenerClientesSeleccionados() {
    List<Cliente> clientesSeleccionados = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    
    for (int i = 0; i < jtblClientes.getRowCount(); i++) {
        boolean marcado = (boolean) jtblClientes.getValueAt(i, 0);  // La columna 0 tiene los checkboxes
        if (marcado) {
            int clienteId = (int) jtblClientes.getValueAt(i, 1);  // La columna 1 tiene el IdCliente
            String nombre = (String) jtblClientes.getValueAt(i, 2);  // Columna con el nombre, por ejemplo
            String direccion = (String) jtblClientes.getValueAt(i, 3);  // Columna con dirección, por ejemplo
            String telefono = (String) jtblClientes.getValueAt(i, 4);  // Columna con teléfono, por ejemplo
            String correo = (String) jtblClientes.getValueAt(i, 5);  // Columna con correo, por ejemplo
            String fechaRegistro = (String) jtblClientes.getValueAt(i, 6);  // Columna con fecha de registro, por ejemplo
            int Whatsapp = (int) jtblClientes.getValueAt(i, 7);// Columna con Whatsapp, por ejemplo
            // Crear el objeto Cliente y agregarlo a la lista
            clientesSeleccionados.add(new Cliente(clienteId, nombre, direccion, telefono, correo, fechaRegistro,Whatsapp));
        }
    }
    
    return clientesSeleccionados;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton JMasivo;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaMensaje;
    private javax.swing.JComboBox<String> jcbEstados;
    private com.toedter.calendar.JDateChooser jcbFechaF;
    private com.toedter.calendar.JDateChooser jcbFechaI;
    private javax.swing.JComboBox<String> jcbServicios;
    private javax.swing.JTable jtblClientes;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblCliente1;
    private javax.swing.JLabel lblFechaF;
    private javax.swing.JLabel lblFechaI;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JPanel paneli;
    // End of variables declaration//GEN-END:variables
}
