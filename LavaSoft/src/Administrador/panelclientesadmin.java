package Administrador;

import java.io.StringReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Luis DC
 */
public class panelclientesadmin extends javax.swing.JPanel {

    /**
     * Creates new form panelclientesadmin
     */
    
    public panelclientesadmin() {
    initComponents();
    actualizarTablaClientes(); // Cargar datos al iniciar
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel17 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblClientes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextCliente1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        BarraDeBusqueda = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Busqueda = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextCliente2 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextCliente3 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextCliente4 = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();
        btnAgregarCliente = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("_________________________");

        jTextField8.setBackground(new java.awt.Color(118, 120, 237));
        jTextField8.setBorder(null);
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(181, 218, 240));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtblClientes.setBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.setForeground(new java.awt.Color(255, 255, 255));
        jtblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdCliente", "Nombre", "Domicilio", "Telefono", "Correo", "FechaRegistro"
            }
        ));
        jtblClientes.setGridColor(new java.awt.Color(51, 51, 51));
        jtblClientes.setSelectionBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtblClientes);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 530, 380));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nombre");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 79, 41));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Email");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 101, 41));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Domicilio");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 101, 41));

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Telefono");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 101, 41));

        jLabel11.setBackground(new java.awt.Color(118, 120, 237));
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("________________________");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 190, -1));

        jTextCliente1.setBackground(new java.awt.Color(181, 218, 240));
        jTextCliente1.setBorder(null);
        jTextCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCliente1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextCliente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 180, 30));

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Clientes");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 190, 30));

        BarraDeBusqueda.setBackground(new java.awt.Color(181, 218, 240));
        BarraDeBusqueda.setBorder(null);
        BarraDeBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarraDeBusquedaActionPerformed(evt);
            }
        });
        jPanel1.add(BarraDeBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 350, 30));

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("_________________________________________________");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 350, -1));

        Busqueda.setFont(new java.awt.Font("Roboto Bk", 0, 18)); // NOI18N
        Busqueda.setForeground(new java.awt.Color(0, 0, 0));
        Busqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar (1).png"))); // NOI18N
        Busqueda.setBorder(null);
        Busqueda.setContentAreaFilled(false);
        Busqueda.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Busqueda.setVerifyInputWhenFocusTarget(false);
        Busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BusquedaActionPerformed(evt);
            }
        });
        jPanel1.add(Busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, -1, -1));

        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("_________________________");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, 180, -1));

        jTextCliente2.setBackground(new java.awt.Color(181, 218, 240));
        jTextCliente2.setBorder(null);
        jTextCliente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCliente2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextCliente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 180, 39));

        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("_________________________");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 180, -1));

        jTextCliente3.setBackground(new java.awt.Color(181, 218, 240));
        jTextCliente3.setBorder(null);
        jTextCliente3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCliente3ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextCliente3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 180, 39));

        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("_________________________");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 330, 130, -1));

        jTextCliente4.setBackground(new java.awt.Color(181, 218, 240));
        jTextCliente4.setBorder(null);
        jTextCliente4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCliente4ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextCliente4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 130, 39));

        btnEditar.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(0, 0, 0));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar (1).png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorder(null);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnEditar.setVerifyInputWhenFocusTarget(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 360, 140, -1));

        btnAgregarCliente.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        btnAgregarCliente.setForeground(new java.awt.Color(0, 0, 0));
        btnAgregarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-agregar.png"))); // NOI18N
        btnAgregarCliente.setText("Añadir");
        btnAgregarCliente.setBorder(null);
        btnAgregarCliente.setContentAreaFilled(false);
        btnAgregarCliente.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAgregarCliente.setVerifyInputWhenFocusTarget(false);
        btnAgregarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarClienteActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 120, -1));

        btnEliminar.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(0, 0, 0));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar (2).png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnEliminar.setVerifyInputWhenFocusTarget(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 120, 30));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCliente1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCliente1ActionPerformed

    private void BarraDeBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraDeBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BarraDeBusquedaActionPerformed

    private void BusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BusquedaActionPerformed
       try {
    String nombreBusqueda = BarraDeBusqueda.getText().trim();

    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    model.setRowCount(0);

    // Consulta SQL para buscar clientes por nombre (usando LIKE para búsquedas parciales)
    String sql = "SELECT [IdCliente], [Nombre], [Direccion], [Telefono], [CorreoElectronico], [FechaRegistro] FROM Cliente WHERE [Nombre] LIKE ?";

    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setString(1, "%" + nombreBusqueda + "%"); // Busca coincidencias parciales en el nombre

        try (ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("IdCliente"),
                    rs.getString("Nombre"),
                    rs.getString("Direccion"),
                    rs.getInt("Telefono"),
                    rs.getString("CorreoElectronico"),
                    rs.getString("FechaRegistro")
                });
            }

            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, 
                    "No se encontró Cliente con nombre: " + nombreBusqueda, 
                    "Información", JOptionPane.INFORMATION_MESSAGE);
                actualizarTablaClientes(); // Mostrar todos los clientes si no hay coincidencias
            }
        }
    }
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Error SQL: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}
    }//GEN-LAST:event_BusquedaActionPerformed
   
    private void jTextCliente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCliente2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCliente2ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextCliente3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCliente3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCliente3ActionPerformed

    private void jTextCliente4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCliente4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCliente4ActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
      if ( clienteSeleccionadoId <= 0) {
        JOptionPane.showMessageDialog(this, "Seleccione un cliente de la tabla primero", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener los datos de los JTextField
    String nombre = jTextCliente1.getText().trim();
    String direccion = jTextCliente2.getText().trim();
    String telefono = jTextCliente3.getText().trim();
    String correo = jTextCliente4.getText().trim();

    // **Validaciones**
    if (nombre.isEmpty() || telefono.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Nombre y teléfono son campos obligatorios", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (!esSoloLetras(nombre)) {
        JOptionPane.showMessageDialog(this, "El nombre solo debe contener letras y espacios", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (!esSoloNumeros(telefono)) {
        JOptionPane.showMessageDialog(this, "El teléfono solo debe contener números", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (!correo.isEmpty() && !contieneArroba(correo)) {
        JOptionPane.showMessageDialog(this, "El correo debe contener un '@'", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int telefonoInt = Integer.parseInt(telefono); // Convertir a número

        try (Connection conn = Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                 "UPDATE dbo.Cliente SET Nombre=?, Direccion=?, Telefono=?, CorreoElectronico=? WHERE IdCliente=?")) {

            pstmt.setString(1, nombre);
            pstmt.setString(2, direccion);
            pstmt.setInt(3, telefonoInt);
            pstmt.setString(4, correo);
            pstmt.setInt(5, clienteSeleccionadoId);

            if (pstmt.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Cliente actualizado correctamente");
                actualizarTablaClientes(); // Refrescar la tabla
                limpiarCampos();
                clienteSeleccionadoId = -1; // Resetear selección
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Formato de teléfono inválido", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al actualizar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarActionPerformed
    // 1. Verifica si solo contiene letras (mayúsculas y minúsculas)
  public static boolean esSoloLetras(String texto) {
    return texto.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+");
}
  
     // 2. Verifica si solo contiene números
    public static boolean esSoloNumeros(String texto) {
        return texto.matches("\\d+");
    }

    // 3. Verifica si contiene al menos un arroba (@)
    public static boolean contieneArroba(String texto) {
        return texto.contains("@");
    }
    
    private void btnAgregarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarClienteActionPerformed
        // TODO add your handling code here:
        
       String nombre = jTextCliente1.getText().trim();
    String direccion = jTextCliente2.getText().trim();
    String telefono = jTextCliente3.getText().trim();
    String correo = jTextCliente4.getText().trim();
    
    // Validación básica
    if (nombre.isEmpty() || telefono.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nombre y teléfono son campos obligatorios", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!esSoloLetras(nombre)) {
            JOptionPane.showMessageDialog(this, "El nombre solo debe contener letras", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!esSoloNumeros(telefono)) {
            JOptionPane.showMessageDialog(this, "El teléfono solo debe contener números", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!correo.isEmpty() && !contieneArroba(correo)) {
            JOptionPane.showMessageDialog(this, "El correo debe contener un '@'", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
    try (Connection conn = Conexion.getConnection()) {
        if (btnAgregarCliente.getText().equals("Actualizar")) {
            // Lógica para actualizar
            String updateSql = "UPDATE dbo.Cliente SET Nombre=?, Direccion=?, Telefono=?, CorreoElectronico=? WHERE IdCliente=?";
            try (PreparedStatement stmt = conn.prepareStatement(updateSql)) {
                stmt.setString(1, nombre);
                stmt.setString(2, direccion);
                stmt.setString(3, telefono);
                stmt.setString(4, correo);
                stmt.setInt(5, clienteSeleccionadoId);
                
                int filasAfectadas = stmt.executeUpdate();
                
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, "Cliente actualizado correctamente");
                    btnAgregarCliente.setText("Añadir");
                    clienteSeleccionadoId = -1;
                }
            }
        } else {
            // Lógica para insertar (tu código existente)
            String insertSql = "INSERT INTO dbo.Cliente (Nombre, Direccion, Telefono, CorreoElectronico, FechaRegistro) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement stmt = conn.prepareStatement(insertSql)) {
                LocalDate fechaActual = LocalDate.now();
                String ftFecha = fechaActual.format(DateTimeFormatter.ISO_DATE);
                
                stmt.setString(1, nombre);
                stmt.setString(2, direccion);
                stmt.setString(3, telefono);
                stmt.setString(4, correo);
                stmt.setString(5, ftFecha);
                
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Cliente agregado correctamente");
            }
        }
        
        // Actualizar la tabla en ambos casos
        actualizarTablaClientes();
        limpiarCampos();
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al operar con la base de datos: " + e.getMessage(), 
                                    "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAgregarClienteActionPerformed

    
   private boolean tienePedidosActivos(int idCliente) {
    String sql = "SELECT COUNT(*) FROM dbo.Pedido WHERE IdCliente = ? AND EstadoPedido IN ('Pendiente', 'Proceso', 'Listo')";

    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        
        stmt.setInt(1, idCliente);
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                int cantidadPedidos = rs.getInt(1);
                return cantidadPedidos > 0; // Retorna true si hay pedidos activos
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al verificar pedidos del cliente: " + e.getMessage(),
                                      "Error", JOptionPane.ERROR_MESSAGE);
    }

    return false;
}

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = jtblClientes.getSelectedRow();

    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un cliente de la tabla", 
                                    "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtener el ID del cliente seleccionado
    int idCliente = (int) jtblClientes.getValueAt(filaSeleccionada, 0);
    String nombreCliente = (String) jtblClientes.getValueAt(filaSeleccionada, 1);

    // **Validación: Verificar si el cliente tiene pedidos activos**
    if (tienePedidosActivos(idCliente)) {
        JOptionPane.showMessageDialog(this, 
            "No se puede eliminar el cliente porque tiene PEDIDOS en servicio.", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Confirmación antes de eliminar
    int confirmacion = JOptionPane.showConfirmDialog(
        this, 
        "¿Está seguro que desea eliminar al cliente:\n" +
        "ID: " + idCliente + "\n" +
        "Nombre: " + nombreCliente + "?", 
        "Confirmar Eliminación", 
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
    );

    if (confirmacion == JOptionPane.YES_OPTION) {
        try (Connection conn = Conexion.getConnection()) {
            String deleteSql = "DELETE FROM dbo.Cliente WHERE IdCliente = ?";
            try (PreparedStatement stmt = conn.prepareStatement(deleteSql)) {
                stmt.setInt(1, idCliente);

                int filasAfectadas = stmt.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, "Cliente eliminado correctamente");
                    actualizarTablaClientes();
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el cliente", 
                                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar cliente: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jtblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblClientesMouseClicked
        int fila = jtblClientes.getSelectedRow(); // Obtiene la fila seleccionada
    if (fila >= 0) {
        // Obtiene los valores de la fila seleccionada y los muestra en los JTextField
         clienteSeleccionadoId = Integer.parseInt(jtblClientes.getValueAt(fila, 0).toString());
         jTextCliente1.setText(jtblClientes.getValueAt(fila, 1).toString());
        jTextCliente2.setText(jtblClientes.getValueAt(fila, 2).toString());
         jTextCliente3.setText(jtblClientes.getValueAt(fila, 3).toString());
         jTextCliente4.setText(jtblClientes.getValueAt(fila, 4).toString());

        btnEditar.setText("Actualizar"); // Cambia el botón para indicar que es una edición
    }
    }//GEN-LAST:event_jtblClientesMouseClicked
    
    private void actualizarTablaClientes() {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    model.setRowCount(0);
    
    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement("SELECT * FROM dbo.Cliente");
         var rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("IdCliente"),
                rs.getString("Nombre"),
                rs.getString("Direccion"),
                rs.getString("Telefono"),
                rs.getString("CorreoElectronico"),
                rs.getDate("FechaRegistro").toString()
            });
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    
    private void cargarClienteParaEdicion(int idCliente) {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(
             "SELECT Nombre, Direccion, Telefono, CorreoElectronico, FechaRegistro FROM dbo.Cliente WHERE IdCliente=?")) {
        
        pstmt.setInt(1, idCliente);
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
           jTextCliente1.setText(rs.getString("Nombre"));
            jTextCliente2.setText(rs.getString("Direccion"));
            jTextCliente3.setText(String.valueOf(rs.getInt("Telefono")));
            jTextCliente4.setText(rs.getString("CorreoElectronico"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al cargar cliente: " + ex.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}

    
    private void cargarCliente(int idCliente) {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(
             "SELECT Nombre, Direccion, Telefono, CorreoElectronico, FechaRegistro FROM dbo.Cliente WHERE IdCliente=?")) {
        
        pstmt.setInt(1, idCliente);
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
             jTextCliente1.setText(rs.getString("Nombre"));
             jTextCliente2.setText(rs.getString("Direccion"));
             jTextCliente3.setText(String.valueOf(rs.getInt("Telefono")));
             jTextCliente4.setText(rs.getString("CorreoElectronico"));
            
            clienteSeleccionadoId = idCliente; // Guarda el ID del cliente seleccionado
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el cliente con ID: " + idCliente, 
                                          "Información", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar cliente: " + ex.getMessage(), 
                                      "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}
    
private void limpiarCampos() {
    jTextCliente1.setText("");
    jTextCliente2.setText("");
    jTextCliente3.setText("");
    jTextCliente4.setText("");
}
    private int clienteSeleccionadoId = -1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BarraDeBusqueda;
    private javax.swing.JButton Busqueda;
    private javax.swing.JButton btnAgregarCliente;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextCliente1;
    private javax.swing.JTextField jTextCliente2;
    private javax.swing.JTextField jTextCliente3;
    private javax.swing.JTextField jTextCliente4;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTable jtblClientes;
    // End of variables declaration//GEN-END:variables
}
