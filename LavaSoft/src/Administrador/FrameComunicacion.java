/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Administrador;

import java.awt.Component;
import java.awt.Desktop;
import java.net.URI;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;


/**
 *
 * @author pablo
 */
public class FrameComunicacion extends javax.swing.JFrame {
private List<Cliente> listaClientes;
    /**
     * Creates new form FrameComunicacion
     */
    public FrameComunicacion() {
        try (Connection conn = Conexion.getConnection()) {
            System.out.println("Conexi贸n exitosa:D.");
            
        } catch (SQLException e) {
            System.out.println("Error de conexi贸n");
            e.printStackTrace();
            
        }
        
        initComponents();
        actualizarTablaClientes(); // Llama a la funci贸n para cargar la tabla
        cargarServicios();
        
    }
     private void actualizarTablaClientes() {
        DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
        model.setRowCount(0);  // Limpiar la tabla antes de llenarla

        try (Connection conn = Conexion.getConnection();
             PreparedStatement stmt = conn.prepareStatement("SELECT * FROM dbo.Cliente");
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    false,  // Inicializa la casilla de verificaci贸n como no seleccionada
                    rs.getInt("IdCliente"),
                    rs.getString("Nombre"),
                    rs.getString("Direccion"),
                    rs.getString("Telefono"),
                    rs.getString("CorreoElectronico"),
                    rs.getDate("FechaRegistro").toString()
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JMasivo = new javax.swing.JRadioButton();
        lblCliente = new javax.swing.JLabel();
        jcbServicios = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblClientes = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMensaje = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        lblCliente1 = new javax.swing.JLabel();
        jcbEstados = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JMasivo.setText("Todos");
        JMasivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMasivoActionPerformed(evt);
            }
        });

        lblCliente.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblCliente.setForeground(new java.awt.Color(0, 0, 0));
        lblCliente.setText("Servicio:");

        jcbServicios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Servicio" }));
        jcbServicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbServiciosMouseClicked(evt);
            }
        });
        jcbServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbServiciosActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Envio de Mensajes/Correos Masivos");

        jtblClientes.setBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.setForeground(new java.awt.Color(255, 255, 255));
        jtblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seleccionar", "IdCliente", "Nombre", "Direccion", "Telefono", "Correo", "FechaRegistro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtblClientes.setGridColor(new java.awt.Color(51, 51, 51));
        jtblClientes.setSelectionBackground(new java.awt.Color(51, 51, 51));
        jtblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblClientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblClientes);

        jTextAreaMensaje.setColumns(20);
        jTextAreaMensaje.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMensaje);

        jButton7.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-agregar (1).png"))); // NOI18N
        jButton7.setText("Enviar");
        jButton7.setBorder(null);
        jButton7.setContentAreaFilled(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton7.setVerifyInputWhenFocusTarget(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        lblCliente1.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        lblCliente1.setForeground(new java.awt.Color(0, 0, 0));
        lblCliente1.setText("Estado:");

        jcbEstados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Estado", "Pendiente", "Proceso", "Listo", "Entregado" }));
        jcbEstados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbEstadosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcbEstadosMouseEntered(evt);
            }
        });
        jcbEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEstadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(JMasivo)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(84, 84, 84))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JMasivo)
                            .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)
                        .addGap(70, 70, 70))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JMasivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMasivoActionPerformed
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    
    // Si el RadioButton est谩 seleccionado
    boolean selectAll = JMasivo.isSelected();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(selectAll, i, 0);  // Actualiza el valor de la casilla de la primera columna
    }
    }//GEN-LAST:event_JMasivoActionPerformed

    private void jcbServiciosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbServiciosMouseClicked
       
    }//GEN-LAST:event_jcbServiciosMouseClicked

    
    private void limpiarChecks() {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(false, i, 0);  // Pone todos los checks de la primera columna en false
    }
}
     private void cargarServicios() {
    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement("SELECT IdServicio, TipoServicio, PrecioUnitario FROM Servicio");
         ResultSet res = stmt.executeQuery()) {
        
        jcbServicios.removeAllItems();
        jcbServicios.addItem("Selecciona Servicio");

        while (res.next()) {
            jcbServicios.addItem(res.getInt("IdServicio") + " - " +
                                 res.getString("TipoServicio") +
                                 " - $" + res.getDouble("PrecioUnitario"));
        }
    } catch (SQLException ex) {
        System.out.println("Error al cargar servicios: " + ex.getMessage());
    }
}
     
    private void jcbServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbServiciosActionPerformed
String itemSeleccionado = (String) jcbServicios.getSelectedItem();
String estadoSeleccionado = (String) jcbEstados.getSelectedItem();

// Si ambos est谩n en "Selecciona", limpiar los checks
if ((itemSeleccionado == null || itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) &&
    (estadoSeleccionado == null || estadoSeleccionado.equalsIgnoreCase("Seleccione Estado"))) {

    limpiarChecks();  // Limpiar los checks si ambos est谩n en "Selecciona"
} else {
    try {
        Integer idServicio = null;
        // Si el servicio no est谩 en "Selecciona servicio", procesamos el servicio
        if (itemSeleccionado != null && !itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) {
            // Asegurarnos de que estamos extrayendo solo el ID del servicio
            idServicio = Integer.valueOf(itemSeleccionado.split("-")[0].trim()).intValue();


        }

        // Si el estado no est谩 en "Selecciona estado", procesamos el estado
        if (estadoSeleccionado != null && !estadoSeleccionado.equalsIgnoreCase("Seleccione Estado")) {
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(idServicio, estadoSeleccionado);
            seleccionarClientesEnTabla(clientesSeleccionados);  // Actualiza los checks en la tabla
        } else if (idServicio != null) {
            // Si s贸lo el servicio est谩 seleccionado, filtramos por servicio
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(idServicio, null);
            seleccionarClientesEnTabla(clientesSeleccionados);
        } else if (estadoSeleccionado != null) {
            // Si s贸lo el estado est谩 seleccionado, filtramos por estado
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(null, estadoSeleccionado);
            seleccionarClientesEnTabla(clientesSeleccionados);
        }
    } catch (NumberFormatException e) {
        System.out.println("Error al convertir ID de servicio: " + itemSeleccionado);
        limpiarChecks(); // Limpiar los checks si hay un error
    }
}

    }//GEN-LAST:event_jcbServiciosActionPerformed

    private void jtblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblClientesMouseClicked

    }//GEN-LAST:event_jtblClientesMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        enviarMensajesMasivo();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jcbEstadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbEstadosMouseClicked
        
    }//GEN-LAST:event_jcbEstadosMouseClicked

    private void jcbEstadosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbEstadosMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbEstadosMouseEntered

    private void jcbEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEstadosActionPerformed
 String itemSeleccionado = (String) jcbServicios.getSelectedItem();
String estadoSeleccionado = (String) jcbEstados.getSelectedItem();

// Si ambos est谩n en "Selecciona", limpiar los checks
if ((itemSeleccionado == null || itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) &&
    (estadoSeleccionado == null || estadoSeleccionado.equalsIgnoreCase("Seleccione Estado"))) {

    limpiarChecks();  // Limpiar los checks si ambos est谩n en "Selecciona"
} else {
    try {
        Integer idServicio = null;
        // Si el servicio no est谩 en "Selecciona servicio", procesamos el servicio
        if (itemSeleccionado != null && !itemSeleccionado.equalsIgnoreCase("Selecciona Servicio")) {
            // Asegurarnos de que estamos extrayendo solo el ID del servicio
            idServicio = Integer.valueOf(itemSeleccionado.split("-")[0].trim()).intValue();


        }

        // Si el estado no est谩 en "Selecciona estado", procesamos el estado
        if (estadoSeleccionado != null && !estadoSeleccionado.equalsIgnoreCase("Seleccione Estado")) {
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(idServicio, estadoSeleccionado);
            seleccionarClientesEnTabla(clientesSeleccionados);  // Actualiza los checks en la tabla
        } else if (idServicio != null) {
            // Si s贸lo el servicio est谩 seleccionado, filtramos por servicio
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(idServicio, null);
            seleccionarClientesEnTabla(clientesSeleccionados);
        } else if (estadoSeleccionado != null) {
            // Si s贸lo el estado est谩 seleccionado, filtramos por estado
            Set<Integer> clientesSeleccionados = obtenerClientesSeleccionados(null, estadoSeleccionado);
            seleccionarClientesEnTabla(clientesSeleccionados);
        }
    } catch (NumberFormatException e) {
        System.out.println("Error al convertir ID de servicio: " + itemSeleccionado);
        limpiarChecks(); // Limpiar los checks si hay un error
    }
}
    }//GEN-LAST:event_jcbEstadosActionPerformed

    
    // Funci贸n para generar el mensaje personalizado con los datos del cliente
public String generarMensaje(Cliente cliente, String mensajeTemplate) {
    String mensaje = mensajeTemplate;

    // Reemplazar los placeholders en el mensaje con los datos del cliente
    if (mensaje.contains("@Nombre")) {
        mensaje = mensaje.replace("@Nombre", cliente.getNombre());
    }
    if (mensaje.contains("@Direccion")) {
        mensaje = mensaje.replace("@Direccion", cliente.getDireccion()); // Corregido: debe ser @domicilio
    }
    if (mensaje.contains("@Telefono")) {
        mensaje = mensaje.replace("@Telefono", cliente.getTelefono());
    }
    if (mensaje.contains("@CorreoElectronico")) {
        mensaje = mensaje.replace("@CorreoElectronico", cliente.getCorreo());
    }
    if (mensaje.contains("@FechaRegistro")) {
        mensaje = mensaje.replace("@FechaRegistro", cliente.getFechaRegistro());
    }
    if (mensaje.contains("@IdCliente")) {
        mensaje = mensaje.replace("@IdCliente", String.valueOf(cliente.getIdCliente()));
    }

    return mensaje;
}

// Funci贸n para generar el mensaje personalizado con los datos del cliente
private void enviarMensajesMasivo() {
    // Obtener los clientes seleccionados
    List<Cliente> clientes = obtenerClientesSeleccionados(); // Este m茅todo obtiene los clientes de la tabla

    // Obtener el mensaje del JTextArea
    String mensajeTemplate = jTextAreaMensaje.getText();

    // Verificar si la plantilla de mensaje no est谩 vac铆a
    if (mensajeTemplate.isEmpty()) {
        JOptionPane.showMessageDialog(this, "El mensaje no puede estar vac铆o.");
        return;
    }

    // Iterar sobre los clientes seleccionados
    for (Cliente cliente : clientes) {
        // Generar el mensaje personalizado para este cliente
        String mensajePersonalizado = generarMensaje(cliente, mensajeTemplate);

        // Ahora enviamos el mensaje por WhatsApp
        String telefono = cliente.getTelefono(); // Obtener el tel茅fono del cliente

        try {
            // Generar la URL de WhatsApp
            String url = "https://api.whatsapp.com/send?phone=52" + telefono + 
                         "&text=" + URLEncoder.encode(mensajePersonalizado, "UTF-8");

            // Abrir la URL de WhatsApp
            Desktop.getDesktop().browse(new URI(url));

            // Opcional: esperar un poco entre cada mensaje
            Thread.sleep(500); // medio segundo entre cada uno

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



    class CheckBoxRenderer extends JCheckBox implements TableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setSelected(value != null && (Boolean) value);  // Define si la casilla est谩 seleccionada
            return this;
        }
    }
    
    private Set<Integer> obtenerClientesSeleccionados(Integer idServicio, String estadoPedido) {
    Set<Integer> clientesSeleccionados = new HashSet<>();
    
    // Base de la consulta
    String sql = "SELECT c.IdCliente " +
                 "FROM Pedido p " +
                 "INNER JOIN Cliente c ON c.IdCliente = p.IdCliente " +
                 "INNER JOIN Servicio s ON s.IdServicio = p.IdServicio " +
                 "WHERE 1=1";  // Condici贸n siempre verdadera, para que podamos agregar m谩s condiciones opcionales

    // Depuraci贸n
    


    if (idServicio != null) {
        sql += " AND p.IdServicio = ?";
    }
    
    if (estadoPedido != null && !estadoPedido.isEmpty()) {
        sql += " AND p.EstadoPedido = ?";
    }

    try (Connection conn = Conexion.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        
        int paramIndex = 1;
        
        if (idServicio != 0) {
            stmt.setInt(paramIndex++, idServicio);
        }
        
        if (estadoPedido != null && !estadoPedido.isEmpty()) {
            stmt.setString(paramIndex, estadoPedido);  // Solo se asigna si el estado no es null o vac铆o
        }
       
        System.out.println("Consulta SQL ejecutada: " + sql);
    System.out.println("Par谩metros -> Servicio: " + idServicio + " | Estado: " + estadoPedido);
    


        ResultSet rs = stmt.executeQuery();
        
        while (rs.next()) {
            clientesSeleccionados.add(rs.getInt("IdCliente"));
            System.out.println("Cliente seleccionado: " + rs.getInt("IdCliente"));
        }
        
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
    return clientesSeleccionados;
}

    private void seleccionarClientesEnTabla(Set<Integer> clientesSeleccionados) {
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    
 for (int i = 0; i < jtblClientes.getRowCount(); i++) {
        int clienteId = (int) jtblClientes.getValueAt(i, 1);  
        boolean marcado = clientesSeleccionados.contains(clienteId);
        jtblClientes.setValueAt(marcado, i, 0);  
    }
}

    private List<Cliente> obtenerClientesSeleccionados() {
    List<Cliente> clientesSeleccionados = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) jtblClientes.getModel();
    
    for (int i = 0; i < jtblClientes.getRowCount(); i++) {
        boolean marcado = (boolean) jtblClientes.getValueAt(i, 0);  // La columna 0 tiene los checkboxes
        if (marcado) {
            int clienteId = (int) jtblClientes.getValueAt(i, 1);  // La columna 1 tiene el IdCliente
            String nombre = (String) jtblClientes.getValueAt(i, 2);  // Columna con el nombre, por ejemplo
            String direccion = (String) jtblClientes.getValueAt(i, 3);  // Columna con direcci贸n, por ejemplo
            String telefono = (String) jtblClientes.getValueAt(i, 4);  // Columna con tel茅fono, por ejemplo
            String correo = (String) jtblClientes.getValueAt(i, 5);  // Columna con correo, por ejemplo
            String fechaRegistro = (String) jtblClientes.getValueAt(i, 6);  // Columna con fecha de registro, por ejemplo

            // Crear el objeto Cliente y agregarlo a la lista
            clientesSeleccionados.add(new Cliente(clienteId, nombre, direccion, telefono, correo, fechaRegistro));
        }
    }
    
    return clientesSeleccionados;
}

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameComunicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameComunicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameComunicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameComunicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameComunicacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton JMasivo;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaMensaje;
    private javax.swing.JComboBox<String> jcbEstados;
    private javax.swing.JComboBox<String> jcbServicios;
    private javax.swing.JTable jtblClientes;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblCliente1;
    // End of variables declaration//GEN-END:variables


}
